services:
  api-gateway:
    build: 
      context: ./ApiGateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - USER_SERVICE_URLS=http://user-management-api-1:8080,http://user-management-api-2:8080,http://user-management-api-3:8080
      - SESSION_SERVICE_URLS=http://session-management-api-1:8080,http://session-management-api-2:8080,http://session-management-api-3:8080
    depends_on:
      redis:
        condition: service_healthy
      user-management-api-1:
        condition: service_started
      user-management-api-2:
        condition: service_started
      user-management-api-3:
        condition: service_started
      session-management-api-1:
        condition: service_started
      session-management-api-2:
        condition: service_started
      session-management-api-3:
        condition: service_started

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    depends_on:
      - api-gateway
      - session-management-api-1
      - session-management-api-2
      - session-management-api-3
      - user-management-api-1
      - user-management-api-2
      - user-management-api-3

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3100:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus

  # Session Management API Replicas
  session-management-api-1:
    build:
      context: ./SessionManagement.API
      dockerfile: Dockerfile
    ports:
      - "5110:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=SessionManagementDB;Username=postgres;Password=iulian
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  session-management-api-2:
    build:
      context: ./SessionManagement.API
      dockerfile: Dockerfile
    ports:
      - "5111:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=SessionManagementDB;Username=postgres;Password=iulian
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  session-management-api-3:
    build:
      context: ./SessionManagement.API
      dockerfile: Dockerfile
    ports:
      - "5112:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=SessionManagementDB;Username=postgres;Password=iulian
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # User Management API Replicas
  user-management-api-1:
    build:
      context: ./UserManagement.API
      dockerfile: Dockerfile
    ports:
      - "5170:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - MongoDbSettings__ConnectionString=mongodb://mongodb:27017
      - MongoDbSettings__DatabaseName=UserManagementDB
      - MongoDbSettings__UsersCollection=Users
    depends_on:
      mongodb:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  user-management-api-2:
    build:
      context: ./UserManagement.API
      dockerfile: Dockerfile
    ports:
      - "5171:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - MongoDbSettings__ConnectionString=mongodb://mongodb:27017
      - MongoDbSettings__DatabaseName=UserManagementDB
      - MongoDbSettings__UsersCollection=Users
    depends_on:
      mongodb:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  user-management-api-3:
    build:
      context: ./UserManagement.API
      dockerfile: Dockerfile
    ports:
      - "5172:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - MongoDbSettings__ConnectionString=mongodb://mongodb:27017
      - MongoDbSettings__DatabaseName=UserManagementDB
      - MongoDbSettings__UsersCollection=Users
    depends_on:
      mongodb:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=iulian
      - POSTGRES_DB=SessionManagementDB
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 3

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 3s
      retries: 3

volumes:
  redis-data:
  postgres-data:
  mongodb-data:
  grafana-data:

